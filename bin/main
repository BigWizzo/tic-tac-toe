#!/usr/bin/env ruby

# rubocop:disable Lint/AssignmentInCondition

# Importing the module Enumerable
# module Enumerable
  # require_relative '../lib/player.rb'
  # require_relative '../lib/board.rb'

# This is the Board class
class Board
  attr_reader :board, :winning_points

  def initialize
    @board = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    @winning_points =
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [2, 4, 6],
      [0, 4, 8]
  end

  def display_bd
    display_bd = "
      | #{@board[0]} | #{@board[1]} | #{@board[2]} |
      -------------
      | #{@board[3]} | #{@board[4]} | #{@board[5]} |
      -------------
      | #{@board[6]} | #{@board[7]} | #{@board[8]} |
      "
    display_bd
  end
end

# This is a class for player
class Player
  attr_reader :player, :player_move, :win

  def initialize(player)
    @player = player
    @player_move = player_move
    @win = win
  end

end


  the_board = Board.new
  board = the_board.board
  winning_points = the_board.winning_points

  player_first = Player.new("Player 1")
  player_second = Player.new("Player 2")
  player_one = player_first.player
  player_two = player_second.player

  # move_one = player_one.player_move
  # move_two = player_two.player_move
  # win_one = player_one.win
  # win_two = player_two.win

  puts "#{player_one}, What's your name?"
  player_one = gets.chomp.capitalize!

  puts "#{player_two}, What's your name?"
  player_two = gets.chomp.capitalize!

  puts 'Welcome to the Tic Tac Toe Game'
  puts 'Please read the Game instructions below.'
  puts '1. The board presented to you has 9 squares numbered from 1 - 9'
  puts '2. To win the game, You need to get 3 chips in a straight line. (Horizontal, Vertical, or Diagonal)'
  puts '3. Try to avoid your opponent from winning by strategically placing your chips'
  puts '4. If no player makes a straight line of 3 chips, the game is a draw'
  chip_one = 'x'.upcase
  chip_two = 'o'.upcase
  puts "#{player_one} you play first your chip is #{chip_one}"
  puts "#{player_two} you play second your chip is #{chip_two}\n\n"
  puts "-----------LET'S BE PLAYING-------------"

  x_count = []
  o_count = []

  turn = 1
  while turn < 6
    prompt_one = "#{player_one} Place Your Chip on the board."
    puts prompt_one
    while move_one = gets.chomp.to_i
      range_one = (1..9).include? move_one
      if range_one == true && board[move_one - 1].is_a?(Integer)
        board[move_one - 1] = 'X'
        x_count.push(move_one - 1)
        puts the_board.display_bd
        break
      else
        puts 'Your input is invalid. Put an available number between 1 - 9 on unoccupied spot'
        puts prompt_one
      end
    end

    # def win_check(winning_points, x_count)
      k = 0
      while k < winning_points.length
        if (x_count & winning_points[k]).length == 3
          win_one = true
          break
        end
        k += 1
      end
    # end

    # win_check(winning_points, x_count)
    
    # def say(words)
      # puts words4
    # end
    # 
    # say("hello")

    if win_one
      puts "#{player_one} You have won the game!!!"
      break
    elsif board.all?(String)
      puts 'This is a DRAW'
      break
    end

    prompt_two = "#{player_two} Place Your Chip on the board."
    puts prompt_two
    while move_two = gets.chomp.to_i
      range_two = (1..9).include? move_two
      if range_two == true && board[move_two - 1].is_a?(Integer)
        board[move_two - 1] = 'O'
        o_count.push(move_two - 1)
        puts the_board.display_bd
        break
      else
        puts 'Your input is invalid. Put an available number between 1 - 9'
        puts prompt_two
      end
    end

    g = 0
    while g < winning_points.length
      if (o_count & winning_points[g]).length == 3
        win_two = true
        break
      end
      g += 1
    end
    if win_two
      puts "Congrats #{player_two} You have won the game!!!"
      break
    elsif board.all?(String) && !win_two
      puts 'This is a DRAW'
      break
    end

    turn += 1
  end
# end

# rubocop:enable Lint/AssignmentInCondition
